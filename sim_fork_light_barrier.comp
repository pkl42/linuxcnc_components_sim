component sim_fork_light_barrier "Simulates a fork light barrier e.g. for Tool Probing";

description
"""
Used for simulating contactless tool probing with a light barrier. 
""";
pin in float cur_pos_x "Current x-position (typically: joint.n.motor-pos-fb)";
pin in float cur_pos_y "Current y-position (typically: joint.n.motor-pos-fb)";
pin in float cur_pos_z "Current z-position (typically: joint.n.motor-pos-fb)";

param rw float light_barrier_x_pos = 1. "X-Position where Tool Probe Signal turns on";
param rw float light_barrier_width = 40. "Width of Fork Light Barrier";

param rw float light_barrier_y_pos = 1. "Y-Position where Tool Probe Signal turns on";
param rw float tool_diameter = 2 "Tool Diameter (halui.tool.diameter)";

param rw float light_barrier_z_pos = 1. "Z-Position where Tool Probe Signal turns on";
param rw float tool_length = 20. "Length of tool in spindle";
param rw float min_detectable_object = 0.05 "Smallest detectable Object of Light Barrier";

pin out bit  tool_probe_on_no "Tool Probe Signal on - Normal Open";
pin out bit  tool_probe_on_nc "Tool Probe Signal on - Normal Closed";

pin in s32 orientation=0 "Orientation: 0 laser light detecting moves on x-Axis, 1 on y-Axis";

function _ fp;
author "Peter Ludwig";
license "GPL";
;;

FUNCTION(_) {
    bool pin_value=false;

    if (cur_pos_z <= light_barrier_z_pos + tool_length - min_detectable_object){
		if ( orientation == 1){
			if ((cur_pos_x <= light_barrier_x_pos + light_barrier_width/2) &&
    	   (cur_pos_x >= light_barrier_x_pos - light_barrier_width/2) &&
		   (cur_pos_y <= light_barrier_y_pos + tool_diameter/2 - min_detectable_object) &&
		   (cur_pos_y >= light_barrier_y_pos - tool_diameter/2 + min_detectable_object )) {
    	        pin_value = true;
		   }
		}
		else
		{
			if ((cur_pos_y <= light_barrier_y_pos + light_barrier_width/2) &&
    	   (cur_pos_y >= light_barrier_y_pos - light_barrier_width/2) &&
		   (cur_pos_x <= light_barrier_x_pos + tool_diameter/2 - min_detectable_object) &&
		   (cur_pos_x >= light_barrier_x_pos - tool_diameter/2 + min_detectable_object )) {
    	        pin_value = true;
		   }
		}

	 }

	 tool_probe_on_nc = !pin_value;
	 tool_probe_on_no = pin_value;

    return;
}
